/*
 * Dámaso temporizadores API
 * API de sensorización del proyecto Dámaso. Ingeniería de Servicios TIC, Universidad de Extremadura
 *
 * OpenAPI spec version: 1.0.0
 * Contact: jleongon@alumnos.unex.es
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import javax.validation.constraints.*;

/**
 * Notificación asociada al temporizador
 */
@Schema(description = "Notificación asociada al temporizador")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaJerseyServerCodegen", date = "2019-11-07T18:16:59.231Z[GMT]")public class TimerNotification   {
  @JsonProperty("notificationID")
  private Long notificationID = null;

  @JsonProperty("content")
  private String content = null;

  /**
   * Identifica el tipo de notificación que se va a enviar
   */
  public enum NotificationTypeEnum {
    MEDICINE("medicine"),
    
    FOOD("food"),
    
    INACTIVITY("inactivity");

    private String value;

    NotificationTypeEnum(String value) {
      this.value = value;
    }

    @Override
    @JsonValue
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static NotificationTypeEnum fromValue(String text) {
      for (NotificationTypeEnum b : NotificationTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }
  @JsonProperty("notificationType")
  private NotificationTypeEnum notificationType = null;

  public TimerNotification notificationID(Long notificationID) {
    this.notificationID = notificationID;
    return this;
  }

  /**
   * Identificador de la notificación.
   * @return notificationID
   **/
  @JsonProperty("notificationID")
  @Schema(example = "12345", description = "Identificador de la notificación.")
  public Long getNotificationID() {
    return notificationID;
  }

  public void setNotificationID(Long notificationID) {
    this.notificationID = notificationID;
  }

  public TimerNotification content(String content) {
    this.content = content;
    return this;
  }

  /**
   * Contiene el mensaje de la notificación.
   * @return content
   **/
  @JsonProperty("content")
  @Schema(example = "¡Hora de tomar el ibuprofeno!", description = "Contiene el mensaje de la notificación.")
  public String getContent() {
    return content;
  }

  public void setContent(String content) {
    this.content = content;
  }

  public TimerNotification notificationType(NotificationTypeEnum notificationType) {
    this.notificationType = notificationType;
    return this;
  }

  /**
   * Identifica el tipo de notificación que se va a enviar
   * @return notificationType
   **/
  @JsonProperty("notificationType")
  @Schema(example = "medicine", description = "Identifica el tipo de notificación que se va a enviar")
  public NotificationTypeEnum getNotificationType() {
    return notificationType;
  }

  public void setNotificationType(NotificationTypeEnum notificationType) {
    this.notificationType = notificationType;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TimerNotification timerNotification = (TimerNotification) o;
    return Objects.equals(this.notificationID, timerNotification.notificationID) &&
        Objects.equals(this.content, timerNotification.content) &&
        Objects.equals(this.notificationType, timerNotification.notificationType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(notificationID, content, notificationType);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TimerNotification {\n");
    
    sb.append("    notificationID: ").append(toIndentedString(notificationID)).append("\n");
    sb.append("    content: ").append(toIndentedString(content)).append("\n");
    sb.append("    notificationType: ").append(toIndentedString(notificationType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}
